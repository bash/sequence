[[operators]]
funcky = { name = "AdjacentGroupBy", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#adjacentgroupby" }

[[operators]]
dotnet = { name = "Aggregate", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.aggregate" }
fsharp = "fold"
rust = { name = "fold", url = "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold" }
python = { name = "accumulate", url = "https://docs.python.org/3/library/itertools.html#itertools.accumulate" }

[[operators]]
fsharp = "reduce"

[[operators]]
fsharp = "reduceBack"

[[operators]]
fsharp = "foldBack"

[[operators]]
dotnet = { name = "All", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.all" }
fsharp = "forall"
python = { name = "all", url = "https://docs.python.org/3/library/functions.html#all" }
npm_itertools = { name = "all", url = "https://github.com/nvie/itertools.js#all" }
java = { name = "allMatch", url = "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#allMatch-java.util.function.Predicate-" }

[[operators]]
dotnet = { name = "Any", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.any" }
fsharp = "exists"
python = { name = "any", url = "https://docs.python.org/3/library/functions.html#any" }
npm_itertools = { name = "any", url = "https://github.com/nvie/itertools.js#any" }
java = { name = "anyMatch", url = "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#anyMatch-java.util.function.Predicate-" }

[[operators]]
fsharp = "allPairs"

[[operators]]
funcky = { name = "AnyOrElse" }

# AsEnumerable from Linq omitted

[[operators]]
dotnet = { name = "Append", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.append" }

[[operators]]
dotnet = { name = "Average", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.average" }
fsharp = "average"
python = { name = "mean", url = "https://docs.python.org/3/library/statistics.html#statistics.mean" }

[[operators]]
dotnet = { name = "Chunk", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.chunk" }
funcky = { name = "Chunk" }
fsharp = "chunkBySize"
rust_itertools = { name = "chunks", url = "https://docs.rs/itertools/latest/itertools/trait.Itertools.html#method.chunks"}
more_itertools = { name = "ichunked", url = "https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.ichunked" }
npm_itertools = { name = "chunked", url = "https://github.com/nvie/itertools.js#chunked" }

# Cast from Linq and cast from F# omitted

[[operators]]
fsharp = "compareWith"

[[operators]]
dotnet = { name = "Concat", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.concat" }
fsharp = "append"

[[operators]]
funcky = "Sequence.Concat"
fsharp = "concat"

[[operators]]
funcky = { name = "ConcatToString" }

[[operators]]
dotnet = { name = "Contains", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.contains" }
fsharp = "contains"

# DefaultIfEmpty from Linq omitted

[[operators]]
dotnet = { name = "Count", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.count" }
fsharp = "length"

[[operators]]
fsharp = "countBy"

[[operators]]
dotnet = { name = "Distinct", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.distinct" }
fsharp = "distinct"

[[operators]]
dotnet = { name = "ElementAt", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.elementat" }
fsharp = "item"

[[operators]]
funcky = { name = "ElementAtOrNone" }
fsharp = "tryItem"

# Empty from Linq omitted for now

[[operators]]
dotnet = { name = "Except", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.except" }
fsharp = "except"

[[operators]]
funcky = { name = "ForEach", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#foreach" }
fsharp = "iter"
rust = { name = "for_each", url = "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.for_each" }
java = { name = "forEachOrdered", url = "https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#forEachOrdered-java.util.function.Consumer-" }

[[operators]]
fsharp = "findIndex"

[[operators]]
fsharp = "findIndexBack"

[[operators]]
fsharp = "tryFindIndex"

[[operators]]
fsharp = "tryFindIndexBack"

[[operators]]
dotnet = { name = "First", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.first" }
fsharp = "head"

[[operators]]
funcky = { name = "FirstOrNone" }
fsharp = "tryHead"

[[operators]]
dotnet = { name = "First(predicate)", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.first" }
fsharp = "find"
# Also: fsharp = "tryPick" ?

[[operators]]
funcky = { name = "FirstOrNone(predicate)" }
fsharp = "tryFind"

[[operators]]
fsharp = "pick"

[[operators]]
fsharp = "tail"

[[operators]]
dotnet = { name = "GroupBy", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.groupby" }
fsharp = "groupBy"

[[operators]]
dotnet = { name = "GroupJoin", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.groupjoin" }

[[operators]]
funcky = { name = "Inspect", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#inspect" }
rust = { name = "inspect", url = "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.inspect" }
more_itertools = { name = "side_effect", url = "https://more-itertools.readthedocs.io/en/stable/api.html#more_itertools.side_effect" }

[[operators]]
funcky = { name = "Interleave", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#interleave" }

[[operators]]
dotnet = { name = "Intersect", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.intersect" }

[[operators]]
funcky = { name = "Intersperse", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#intersperse" }

[[operators]]
fsharp = "insertAt"

[[operators]]
fsharp = "insertManyAt"

[[operators]]
fsharp = "updateAt"

[[operators]]
fsharp = "removeAt"

[[operators]]
fsharp = "removeManyAt"

[[operators]]
dotnet = { name = "Join", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.join" }

[[operators]]
funcky = { name = "JoinToString" }

[[operators]]
dotnet = { name = "Last", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.last" }
fsharp = "last"

[[operators]]
funcky = { name = "LastOrNone"}
fsharp = "tryLast"

[[operators]]
dotnet = { name = "Last(predicate)", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.last" }
fsharp = "findBack"

[[operators]]
dotnet = { name = "LastOrNone(predicate)", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.last" }
fsharp = "tryFindBack"

[[operators]]
funcky = { name = "Materialize" }

[[operators]]
dotnet = { name = "Max", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.max" }
fsharp = "max"

[[operators]]
funcky = { name = "Memoize" }
fsharp = "cache"

[[operators]]
funcky = { name = "Merge", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#merge" }

[[operators]]
dotnet = { name = "Min", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.min" }
fsharp = "min"

[[operators]]
funcky = { name = "None" }
fsharp = "isEmpty"

[[operators]]
funcky = { name = "None(predicate)" }

[[operators]]
dotnet = { name = "OfType", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.oftype" }

[[operators]]
dotnet = { name = "Order", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.order" }
fsharp = "sort"

# TODO: OrderBy and OrderByDescending (F#: sortBy, sortByDescending)

[[operators]]
dotnet = { name = "OrderDescending", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.orderdescending" }
fsharp = "sortDescending"

[[operators]]
funcky = { name = "Pairwise", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#pairwise" }
fsharp = "pairwise"

[[operators]]
funcky = { name = "Partition", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#partition" }

[[operators]]
fsharp = "permute"

[[operators]]
funcky = { name = "PowerSet", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#powerset" }

[[operators]]
dotnet = { name = "Prepend", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.prepend" }

# Range and Repeat from Linq omitted for now

[[operators]]
dotnet = { name = "Reverse", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.reverse" }
fsharp = "rev"

[[operators]]
fsharp = "scan"

[[operators]]
fsharp = "scanBack"

[[operators]]
funcky = { name = "InclusiveScan" }
rust = { name = "scan", url = "https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.inspect" }

[[operators]]
funcky = { name = "ExclusiveScan" }

[[operators]]
dotnet = { name = "Select", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.select" }
fsharp = "map"

[[operators]]
dotnet = { name = "SelectMany", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.selectmany" }
fsharp = "collect"

[[operators]]
fsharp = "mapFold"

[[operators]]
fsharp = "mapFoldBack"

[[operators]]
funcky = { name = "Sequence" }

[[operators]]
dotnet = { name = "SequenceEqual", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sequenceequal" }

[[operators]]
funcky = { name = "Shuffle", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#shuffle" }

[[operators]]
dotnet = { name = "Single", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.single" }
fsharp = "exactlyOne"

[[operators]]
fsharp = "tryExactlyOne"

[[operators]]
dotnet = { name = "Skip", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.skip" }
fsharp = "skip"

[[operators]]
dotnet = { name = "SkipLast", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.skiplast" }

[[operators]]
dotnet = { name = "SkipWhile", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.skipwhile" }
fsharp = "skipWhile"

[[operators]]
funcky = { name = "SlidingWindow", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#slidingwindow" }
fsharp = "windowed"

[[operators]]
funcky = { name = "Split", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#split" }

[[operators]]
fsharp = "splitInto"

[[operators]]
dotnet = { name = "Sum", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.sum" }
fsharp = "sum"

[[operators]] # Take at most n elements
dotnet = { name = "Take", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.take" }
fsharp = "truncate"

[[operators]] # Take exactly n elements
fsharp = "take"

[[operators]]
funcky = { name = "TakeEvery", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#takeevery" }

[[operators]]
dotnet = { name = "TakeLast", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.takelast" }

[[operators]]
dotnet = { name = "TakeWhile", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.takewhile" }
fsharp = "takeWhile"

[[operators]]
funcky = { name = "Transpose", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#transpose" }
fsharp = "transpose"

[[operators]]
funcky = { name = "Traverse" }

# To[Collection] from Linq omitted for now

# TryGetNonEnumerated from Linq omitted

[[operators]]
dotnet = { name = "Union", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.union" }

[[operators]]
dotnet = { name = "Where", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where" }
fsharp = "filter"
# Also: fsharp = "where"

[[operators]]
funcky = { name = "WhereNotNull", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#wherenotnull" }

[[operators]]
funcky = { name = "WhereSelect", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#whereselect" }
fsharp = "choose"

[[operators]]
funcky = { name = "WithFirst", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#withfirst" }

[[operators]]
funcky = { name = "WithIndex", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#withindex" }
fsharp = "indexed"

[[operators]]
funcky = { name = "WithLast", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#withlast" }

[[operators]]
funcky = { name = "WithPrevious", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#withprevious" }

[[operators]]
dotnet = { name = "Zip", url = "https://learn.microsoft.com/en-us/dotnet/api/system.linq.enumerable.zip" }
fsharp = "zip"

[[operators]]
funcky = { name = "ZipLongest", url = "https://polyadic.github.io/funcky/enumerable-extensions/enumerable-extensions.html#withprevious" }